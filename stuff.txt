        // Add all of the Outputs from the current transaction to the current UTXO Pool
        for (Transaction tx: validTxs) {
            // Modify so a Transaction found to be invlaid causes no change to the currentUtxoPool
            // FIXME UTXOPool tmpPool = new UTXOPool(currentUtxoPool);
            
            for (int output = 0; output < tx.numOutputs(); ++output) {
                currentUtxoPool.addUTXO(new UTXO(tx.getHash(), output), tx.getOutput(output));
            }

            // Now remove the Outputs in the current pool that are 'spent' by an Input.
            // If an Input spends an Output that doesn't exist, the transaction is invalid
            // FIXME boolean validTx = true;    // Assume they are OK
            for (int input = 0; input < tx.numInputs() /* && validTx */; ++input) {
                UTXO u = new  UTXO(tx.getInput(input).prevTxHash, tx.getInput(input).outputIndex);
                if (currentUtxoPool.contains(u)) {
                    currentUtxoPool.removeUTXO(u);
                }
                /*
                else {
                    validTx = false;
                }
                */
            }
            /*
            if (validTx)
                currentUtxoPool = tmpPool;
            else
                invalidTxList.add(tx);
            */
        }
        
        /*
        for (Transaction invalid : invalidTxList) {
            validTxs.remove(invalid);
        }
        */
